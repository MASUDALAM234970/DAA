#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define INFINITY 9999
#define max 100

void dijkstra(int cost[max][max], int n, int startnode);

int main() {
    int cost[max][max], i, j, n;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);

    dijkstra(cost, n, startnode);

    return 0;
}

void dijkstra(int cost[max][max], int n, int startnode) {
    int distance[max], pred[max];
    bool visited[max];
    int count, mindistance, nextnode, i, j;

    // Initialization
    for (i = 0; i < n; i++) {
        distance[i] = cost[startnode][i];
        pred[i] = startnode;
        visited[i] = false;
    }

    distance[startnode] = 0;
    visited[startnode] = true;
    count = 1;

    while (count < n - 1) {
        mindistance = INFINITY;

        // Nextnode gives the node at minimum distance
        for (i = 0; i < n; i++) {
            if (distance[i] < mindistance && !visited[i]) {
                mindistance = distance[i];
                nextnode = i;
            }
        }

        // Check if a better path exists through nextnode
        visited[nextnode] = true;
        for (i = 0; i < n; i++) {
            if (!visited[i]) {
                if (mindistance + cost[nextnode][i] < distance[i]) {
                    distance[i] = mindistance + cost[nextnode][i];
                    pred[i] = nextnode;
                }
            }
        }
        count++;
    }

    // Print the distance and path from the startnode to all other nodes
    for (i = 0; i < n; i++) {
        if (i != startnode) {
            printf("Distance from node %d to node %d: %d\n", startnode, i, distance[i]);
            printf("Path: %d", i);

            j = i;
            do {
                j = pred[j];
                printf(" <- %d", j);
            } while (j != startnode);

            printf("\n");
        }
    }
}
